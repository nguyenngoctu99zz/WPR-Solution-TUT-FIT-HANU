> use bookdb

db.books.insertMany([
  {
    title: "MongoDB Guide",
    tag: ["mongodb", "guide", "database"],
    n: 100,
    review_score: 4.3,
    price: [
      { v: 19.99, c: "€", country: "IT" },
      { v: 18, c: "£", country: "UK" }
    ],
    author: {
      _id: 1,
      name: "Mario",
      surname: "Rossi"
    }
  },
  {
    title: "Developing with Python",
    tag: ["python", "guide", "programming"],
    n: 352,
    review_score: 4.6,
    price: [
      { v: 24.99, c: "€", country: "IT" },
      { v: 19.49, c: "£", country: "UK" }
    ],
    author: {
      _id: 2,
      name: "John",
      surname: "Black"
    }
  }
])



Find all books with a number of pages greater than 250:


db.books.find({ n: { $gt: 250 } })
Find all books authored by Mario Rossi:

db.books.find({ "author.name": "Mario", "author.surname": "Rossi" })
Find all books with a price less than 20 € for Italy (IT):

db.books.find({ "price.v": { $lt: 20 }, "price.country": "IT" })
Increase the review score by 0.2 points for all books with the tag "database":


db.books.updateMany(
  { tag: "database" },
  { $inc: { review_score: 0.2 } }
)
Insert the tag "NoSQL" for all books with the tag "mongodb":

db.books.updateMany(
  { tag: "mongodb" },
  { $addToSet: { tag: "NoSQL" } }
)
Insert the publisher for all books authored by Mario Rossi:


db.books.updateMany(
  { "author.name": "Mario", "author.surname": "Rossi" },
  { $set: { publisher: { name: 'Polito', city: 'Turin' } } }
)
Find the maximum, minimum, and average price of all books with the tag "database":


db.books.aggregate([
  { $match: { tag: "database" } },
  {
    $unwind: "$price"
  },
  {
    $group: {
      _id: null,
      maxPrice: { $max: "$price.v" },
      minPrice: { $min: "$price.v" },
      avgPrice: { $avg: "$price.v" }
    }
  }
])
Count the number of books authored by Mario Rossi:


db.books.countDocuments({ "author.name": "Mario", "author.surname": "Rossi" })
